using System;
using System.Numerics;

namespace CFDSharpClassLibrary.PotentialFlow
{
    /// <summary>
    /// A class containing functions for computing quantities related to the velocity potential.
    /// </summary>
    public static class VelocityPotential
    {
        /// <summary>
        /// Computes the steady state velocity potential at r generated by the point source.
        /// </summary>
        /// <param name="r">The point at which the velocity potential is to be computed.</param>
        /// <param name="pointSource">The point source causing the velocity potential.</param>
        /// <returns>The velocity potential at the point r.</returns>
        public static double ComputeSteadyState(Vector3 r, IPointSource pointSource)
        {
            double d = (pointSource.Position - r).Length();
            double velocityPotential = -pointSource.Strength / (4 * Math.PI * d);
            return velocityPotential;
        }
        /// <summary>
        /// Computes the steady state velocity potential at r generated by the point sources.
        /// </summary>
        /// <param name="r">The point at which the velocity potential is to be computed.</param>
        /// <param name="pointSources">The point sources causing the velocity potential.</param>
        /// <returns>The velocity potential at the point r.</returns>
        public static double ComputeSteadyState(Vector3 r, IPointSource[] pointSources)
        {
            double velocityPotential = 0;
            for (int i = 0; i < pointSources.Length; i++)
            {
                velocityPotential += ComputeSteadyState(r, pointSources[i]);
            }
            return velocityPotential;
        }
    }
}
